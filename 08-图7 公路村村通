#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#define N (1<<30)
using namespace std;
struct edge {
    int s;
    int e;
    int c;
    bool v;
};
typedef struct edge EDGE;
bool cmp(EDGE a,EDGE b) {
    if (a.c<b.c)
        return true;
    return false;
}
int main() {
    freopen("read.txt","r",stdin);
    int n,m;
    cin>>n>>m;
    vector< EDGE >edge(m);
    set<int>sSet;
    vector<bool>vst(n+1,false);
   // vector<vector<int> >scMap(n+1,vector<int>(n+1,N));
    for (int i=0; i<m; i++) {
        int s,e,c;
        scanf("%d %d %d",&s,&e,&c);
        edge[i].s=s;
        edge[i].e=e;
        edge[i].c=c;
        edge[i].v=false;

       // scMap[s][e]=scMap[e][s]=c;
    }
    sort(edge.begin(),edge.end(),cmp);
    sSet.insert(edge[0].s);
    sSet.insert(edge[0].e);
    edge[0].v=true;
    vst[edge[0].s]=true;
    vst[edge[0].e]=true;
    int vstNum=2;
    int sum=edge[0].c;
    while(vstNum<n) {
        int mv=N;
        int k=-1;
        for (int i=0; i<m; i++) {
//
            if (!edge[i].v) {

                if (vst[edge[i].e]+(vst[edge[i].s])==1 ) {

                    if (mv>edge[i].c) {
                        k=i;
                        mv=edge[i].c;
                    }
                }
            }
        }
        if (-1==k) {

            cout<<-1<<endl;
            return 0;
        } else {
            vst[edge[k].s]=true;
            vst[edge[k].e]=true;
            sum+=edge[k].c;
            edge[k].v=true;
            vstNum++;
        }
    }

    cout << sum<< endl;
    return 0;
}
