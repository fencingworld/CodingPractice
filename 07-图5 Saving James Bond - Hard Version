#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <math.h>
#include <stack>
#define N 105
#define INF 999999
///13:20
using namespace std;
class node {
public:
    node() {}
    node(int x,int y ):m_x(x),m_y(y) {}
    int m_x;
    int m_y;
};
int n;
int dist[N];
//vector<int >dist(N,INF);
bool coll[N];
int path[N];
vector<node>vNode;
int mp[N][N];
//vector< vector < int >(N,INF) > mp( N);
//int INF = 1<<8;
bool isFull() {

    int fi;
    for ( fi=1; fi<=n+1; fi++) {
        if (coll[fi]==false) {
            return false;
        }
    }
    return true;
}
int minDistK() {
    int k=-1;
    int v=INF;
    for (int i=1; i<=n+1; i++) {
        if (coll[i]==false) {
           // cout<<i<<" "<<dist[i]<<"  ";
            if (v>dist[i]) {

                v=dist[i];
                k=i;
            }
        }
    }
   // cout<<k<<endl;
    return k;
}
int deep;
stack<int> pStack;
void makePath(int tar) {
    int i=path[tar];
    if (-1!=i) {
        pStack.push(i);
        deep++;
        makePath(i);

        //cout<<i<<" "<<vNode[i].m_x<<" "<<vNode[i].m_y<<endl;
    }
    //cout<<"=============="<<endl;


    //break;

    // cout<<"------------------"<<endl;
    // if (i<=n+1)
    //  cout<<vNode[i].m_x<<" "<<vNode[i].m_y<<endl;
}
int myMin(int x,int y) {
    int sc[4];
    sc[0]=50-x;
    sc[1]=x+50;
    sc[2]=y+50;
    sc[3]=50-y;
    int t=sc[0];
    for (int i=1; i<4; i++) {
        if (t>sc[i]) {
            t=sc[i];
        }
    }
    return t;

}
int main() {
    int imax,a,b;
    for (int i=0; i<N; i++) {
        for (int j=0; j<N; j++) {
            mp[i][j]=INF;
        }

    }
    // memset(mp,INF,sizeof(mp));
    for (int i=0; i<N; i++) {
        dist[i]=INF;
    }
    // memset(dist,INF,sizeof(dist));
    memset(path,-1,sizeof(path));
    memset(coll,false,sizeof(coll));
    /*    for (int i=0; i<=n+1; i++)
        cout<<coll[i]<<" ";*/
    //cout<<endl;
    vNode.push_back(node(0,0));
    cin>>n>>imax;
    for (int i=0; i<n; i++) {
        cin>>a>>b;
        vNode.push_back(node(a,b));
    }
    node tnode;
    //mp[0][0]=0;
    int ilen;
    for (int i=1; i<=n; i++) {
        tnode=vNode[i];
        ilen=tnode.m_x*tnode.m_x+tnode.m_y*tnode.m_y;
        if ((4*ilen)<=(15+2*imax)*(15+2*imax)) {
            dist[i]=mp[0][i]=mp[i][0]=4*ilen-15*15;
        }
    }
    //dist[n+1]=INF;

    node snode;
    for (int i=1; i<=n; i++) {
        tnode=vNode[i];
        for (int j=i+1; j<=n; j++) {
            snode=vNode[j];
            ilen=(tnode.m_x-snode.m_x)*(tnode.m_x-snode.m_x);
            ilen+=(tnode.m_y-snode.m_y)*(tnode.m_y-snode.m_y);
            if (ilen<=imax*imax) {
                mp[i][j]=mp[j][i]=4*ilen;
            }
        }
        int tmp;
        tmp=myMin(tnode.m_x,tnode.m_y);
        if (tmp<=imax) {
            mp[i][n+1]=tmp*tmp*4 ;
            mp[n+1][i]=mp[i][n+1]=tmp*tmp*4 ;
        }

    }
    int k;

    while(!isFull()) {
        //  cout<<".";
        k=minDistK();

        //  cout<<k<<" ";
        if (-1==k)
            break;
        coll[k]=true;
        for (int i=1; i<=n+1; i++) {
            if (i!=k&&mp[k][i]<=INF&&coll[i]==false) {
                if (dist[i]>dist[k]+mp[k][i]) {
                    dist[i]=dist[k]+mp[k][i];
                    //cout<<k<<"->"<<i<<endl;
                    path[i]=k;
                }
            }
        }

    }


    // cout<<dist[n+1]<<endl;
    if (-1==path[n+1]) {
        cout<<0<<endl;
    } else {
        makePath(n+1);
        cout<<pStack.size()<<endl;
        while(!pStack.empty()) {
            int i=pStack.top();
            pStack.pop();
            cout<<vNode[i].m_x<<" "<<vNode[i].m_y<<endl;

        }

    }

    /*  for (int i=0; i<=n+1; i++)
          cout<<i<<" "<<path[i]<<endl;
      cout<<endl;

      cout<<endl;
      for (int i=0; i<=n+1; i++)
          cout<<dist[i]<<" ";
      cout<<endl<<endl;
      for (int i=0; i<=n+1; i++) {
          for (int j=0; j<=n+1; j++)
              cout<<mp[i][j]<<" ";
          cout<<endl;
      }
    */

  //  cout << "Hello world!" << endl;
    return 0;
}
