#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#define N 105
#define INF 999999
///13:20-18:20
///15:30-
using namespace std;
class node {
public:
    node() {}
    node(int x,int y ,bool save):m_x(x),m_y(y),minDist(INF) ,isSave(save),step(0) {}
    node(int x,int y ):m_x(x),m_y(y) ,minDist(INF),isSave(false),step(0) {}
    int m_x;
    int m_y;
    int minDist;
    bool isSave;
    int step;
    int preNode;
};
int n;

vector<bool> vst(N,false);
vector<int > path(N,-1);
vector<node>vNode;
int mp[N][N];
//vector< vector < int >(N,INF) > mp( N);
//int INF = 1<<8;

int deep;
stack<int> pStack;
void makePath(int tar) {
    if (-1!=tar)
    {
        pStack.push(tar);
        makePath(path[tar]);
    }



}
int myMin(int x,int y) {
    int sc[4];
    sc[0]=50-x;
    sc[1]=x+50;
    sc[2]=y+50;
    sc[3]=50-y;
    int t=sc[0];
    for (int i=1; i<4; i++) {
        if (t>sc[i]) {
            t=sc[i];
        }
    }
    return t;

}
int main() {
    freopen("read3.txt","r",stdin);
    int imax,a,b;
    for (int i=0; i<N; i++) {
        for (int j=0; j<N; j++) {
            mp[i][j]=INF;
        }
    }



    vNode.push_back(node(0,0));
    cin>>n>>imax;

    for (int i=0; i<n; i++) {
        cin>>a>>b;
        if (4*(a*a+b*b)<=15*15)
            continue;
        if (a<-50||a>50||b<-50||b>50)
            continue;
        bool save=myMin(a,b)<=imax;
        vNode.push_back(node(a,b,save));
    }
    if (imax>=42) {
        cout<<1;
        return 0;
    }


    node tnode;
    //mp[0][0]=0;
    int ilen;
    n=vNode.size()-1;
    for (int i=1; i<=n; i++) {
        tnode=vNode[i];
        ilen=tnode.m_x*tnode.m_x+tnode.m_y*tnode.m_y;
        if ((4*ilen)<=(15+2*imax)*(15+2*imax)) {
            vNode[i].minDist=mp[0][i]=mp[i][0]=4*ilen-15*15;
        }
    }


    node snode;
    for (int i=1; i<=n; i++) {
        tnode=vNode[i];
        for (int j=i+1; j<=n; j++) {
            snode=vNode[j];
            ilen=(tnode.m_x-snode.m_x)*(tnode.m_x-snode.m_x);
            ilen+=(tnode.m_y-snode.m_y)*(tnode.m_y-snode.m_y);
            if (ilen<=imax*imax) {
                mp[i][j]=mp[j][i]=4*ilen;
            }
        }
        int tmp;
        tmp=myMin(tnode.m_x,tnode.m_y);
        if (tmp<=imax) {
            mp[i][n+1]=tmp*tmp*4 ;
            mp[n+1][i]=mp[i][n+1]=tmp*tmp*4 ;
        }

    }

    queue<int>qu;
    for (int i=1;i<=n;i++)
    {
        if (vNode[i].minDist!=INF)
        {
            qu.push(i);
            vst[i]=true;
        }
    }

    int resK=-1,resM=INF;
    while(!qu.empty()) {

        int top=qu.front();

        qu.pop();
        for (int i=1; i<=n; i++) {

            if (!vst[i] && mp[top][i]!=INF ) {
                //   cout<<"-----------";
                vst[i]=true;
                vNode[i].step=vNode[top].step+1;
                vNode[i].minDist=vNode[top].minDist;
                path[i]=top;

                if (vNode[i].isSave) {

                    if (vNode[i].step<resM   ) {
                        resK=i;
                        resM=vNode[i].step;

                    }

                    else if (vNode[i].step==resM) {
                        if (vNode[i].minDist<vNode[resK].minDist) {
                            resK=i;
                        }
                    }



                } else {
                    qu.push(i);


                }
            }
        }
    }


    if (-1==resK) {
        cout<<0<<endl;
    } else {
        makePath(resK);
        cout<<pStack.size()+1<<endl;
        while(!pStack.empty()) {
            int i=pStack.top();
            pStack.pop();
            cout<<vNode[i].m_x<<" "<<vNode[i].m_y<<endl;
        }

    }

    return 0;
}
