#include <iostream>
#include <vector>
#include <stack>
#define N 500
#define INF (1<<30)
using namespace std;
bool isFull(int& n,vector<bool>& vst) {
    for (int i=0; i<n; i++) {
        if (vst[i]==false)
            return false;
    }
    return true;
}
int findMin(int& n,vector<int>& dist,vector<bool>& vst) {
    int k=-1;
    int v=INF;
    for (int i=0; i<n; i++) {
        if (false==vst[i]) {
            if (v>dist[i]) {
                v=dist[i];
                k=i;
            }
        }
    }
    return k;

}
int main() {
    int n,m,s,d;
    //cout<<INF;
    //bool vst[N];
    vector<vector<int> >mp(N,vector<int> (N,INF));
    vector<vector<int> >cs(N,vector<int> (N,0));
    vector<bool>vst(N,false);
    vector<int>dist(N,INF);
    vector<int>cdist(N,INF);

    // cout<<dist.size();
    //cout<<mp[1][1];
    cin>>n>>m>>s>>d;
    vector<int>path(N,s);
    for (int i=0; i<m; i++) {
        int ta,tb,td,tc;
        cin>>ta>>tb>>td>>tc;
        mp[ta][tb]=mp[tb][ta]=td;
        cs[ta][tb]=cs[tb][ta]=tc;
    }
    for (int i=0; i<n; i++) {
        dist[i]=mp[s][i];
        cdist[i]=cs[s][i];
    }
    vst[s]=true;
    int k;
    while(!isFull(n,vst)) {
        k=findMin(n,dist,vst);
        if (-1==k) {
            break;
        }
        vst[k]=true;
        for (int i=0; i<n; i++) {
            if (INF!=mp[i][k] && false==vst[i]) {
                if ( (dist[i] > dist[k]+mp[k][i]) ||
                        (   (dist[i]==dist[k]+mp[k][i])
                            && (cdist[i]>cdist[k]+cs[k][i]))
                   ) {
                    dist[i]=dist[k]+mp[k][i];
                    cdist[i]=cdist[k]+cs[k][i];
                    path[i]=k;

                }
            }
        }
    }
    int resLen=0,resCost=0;
    int tmp=d;
    while(tmp!=s) {
        resLen+=mp[tmp][path[tmp]];
        resCost+=cs[tmp][path[tmp]];
        tmp=path[tmp];
    }
    cout <<resLen<<" "<<resCost<< endl;
    return 0;
}
