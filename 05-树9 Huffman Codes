#include <iostream>
#include <string.h>
#include <list>
#include <string>
#include <stack>
#include <algorithm>
#define N 256
using namespace std;
struct node {
    char ch;
    int  fre;
    struct node *lf;
    struct node *rt;
    bool leave;
};
struct code {
    char ch;
    string st;
};
struct code stcode[63];
struct node iNode[63];
struct node iNodeb[63];
typedef struct tree {
    int chlf;
    int chrt;
    int fre;
    int parent;
    int pos;
    bool leave;
    char ch;
    int len;
} Tree;
Tree TreeMap[63*2];
Tree TreeCpy[63*2];
int Score[N];
int n;
bool cmp(Tree a,Tree b) {
    return a.fre<b.fre;
}
int getMinValue() {
    list <struct node> lNode;
    int i;
    int t;
    stack<int>stTree;
    char ch;
    cin>>n;

    memset(Score,0,sizeof(Score));
    for ( i=0; i<n; i++) {
        cin>>ch>>t;
        TreeMap[i].ch=ch;
        TreeMap[i].fre=t;
        TreeMap[i].chlf=-1;
        TreeMap[i].chrt=-1;
        TreeMap[i].parent=-1;
        TreeMap[i].leave=true;
        TreeMap[i].pos=i;
    }
    copy(TreeMap,TreeMap+n,TreeCpy);
    int idx=n;
    for (i=0; i<n-1; i++) {
        sort(TreeCpy+i,TreeCpy+n,cmp);
        TreeMap[idx].ch=0;
        TreeMap[idx].fre=TreeCpy[i].fre+TreeCpy[i+1].fre;
        TreeMap[idx].chlf=TreeCpy[i].pos;
        TreeMap[idx].chrt=TreeCpy[i+1].pos;
        TreeMap[idx].parent=-1;
        TreeMap[idx].leave=false;
        TreeCpy[i+1].fre=TreeMap[idx].fre;
        TreeCpy[i+1].pos=idx;
        idx++;
    }
   /* for (i=0; i<2*n-1; i++) {
        cout<<i<<" "<<TreeMap[i].chlf<<" "<<TreeMap[i].chrt<<" "<<TreeMap[i].leave<<endl;
    }*/
    stTree.push(2*n-2);
    TreeMap[2*n-2].len=0;
    int idxC;
    while(!stTree.empty()) {
        // cout<<stTree.size()<<endl;
        idx = stTree.top();
        // cout<<idx<<" ";
        stTree.pop();
        // cout<<TreeMap[idx].chrt;
        if (TreeMap[idx].chrt!=-1) {
            idxC=TreeMap[idx].chrt;
            TreeMap[idxC].len=TreeMap[idx].len+1;
            stTree.push(TreeMap[idx].chrt);
        }

        if (TreeMap[idx].chlf!=-1) {
            idxC=TreeMap[idx].chlf;
            TreeMap[idxC].len=TreeMap[idx].len+1;
            stTree.push(TreeMap[idx].chlf);
        }
    }
    int totalFre=0;
    for (i=0; i<n; i++) {
        totalFre+=TreeMap[i].len*TreeMap[i].fre;

    }
  //  cout<<totalFre<<endl;
    return totalFre;



}
bool checkMin(int m) {
    char ch;
    string st;
    int total=0,i;
    bool resP=true,resM=true;
    for (i=0; i<n; i++) {
        cin>>ch>>st;
        for (int j=0; j<i; j++) {
           // cout<<stcode[j].st.find(st)<<endl;
            if (stcode[j].st.find(st)==0) {

                resP= false;
            }
            if (st.find(stcode[j].st)==0) {
                   // cout<<"ddddddd"<<i<<endl;
                resP =false;
            }
        }
        stcode[i].ch=ch;
        stcode[i].st=st;
        total+=TreeMap[i].fre*st.length();

    }
    if (total!=m)
    {
        resM = false;
    }
    //cout<<resP<<" "<<resM<<endl;
   // cout<<string::npos<<endl;

    return resM&&resP;
}
int main() {
    int m=getMinValue();
    int tn;
    cin>>tn;
    for (int i=0; i<tn; i++) {
        if (checkMin(m)) {
            cout<<"Yes"<<endl;
        } else {
            cout<<"No"<<endl;
        }
    }
    return 0;
}
