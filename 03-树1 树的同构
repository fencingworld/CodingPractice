#include <iostream>
#include <stack>
#define N 10
using namespace std;
typedef struct node
{
    char Ch;
    int Left;
    int Right;
} NODE;
void readData(NODE Node[],int &head)
{
    char ch;
    int n,i,lf,rt,top;
    int hS[N]= {0};
    stack<int> st;
    cin>>n;
    for (i=0; i<n; i++)
    {
        cin>>Node[i].Ch;
        cin>>ch;
        Node[i].Left    = (ch=='-')? -1:(ch-'0');
        if (Node[i].Left !=-1)
        {
            hS[Node[i].Left ]=1;
        }
        cin>>ch;
        Node[i].Right   = (ch=='-')? -1:(ch-'0');
        if (Node[i].Right !=-1)
        {
            hS[Node[i].Right ]=1;
        }
    }
    for (i=0; i<n; i++)
    {
        if (hS[i]==0)
        {
            head=i;
            break;
        }
    }

}
bool cmp(NODE NodeA[],NODE NodeB[],int headA,int headB)
{
    stack<int >A;
    stack<int >B;
    int topA,alf,art;
    int topB,blf,brt;
    if (headA==-1&&headB==-1)
    {
        return true;
    }
    else if ((headA==-1&&headB!=-1)||(headA!=-1&&headB==-1))
    {
        return false;
    }
    A.push(headA);
    B.push(headB);
    while(!A.empty()&&!B.empty())
    {
        topA= A.top();
        topB= B.top();
        //cout<<NodeA[topA].Ch<<" "<<NodeB[topB].Ch<<endl;
        if (NodeA[topA].Ch!=NodeB[topB].Ch)
        {
            return false;
        }
        A.pop();
        B.pop();
        alf=NodeA[topA].Left;
        art=NodeA[topA].Right;
        blf=NodeB[topB].Left;
        brt=NodeB[topB].Right;
        if (alf!=-1&&art!=-1)
        {
            if (NodeA[alf].Ch>NodeA[art].Ch)
            {
                A.push(alf);
                A.push(art);
            }
            else
            {
                A.push(art);
                A.push(alf);
            }
        }
        else if (alf!=-1)
        {
            A.push(alf);
        }
        else if (art!=-1)
        {
            A.push(art);
        }
        if (blf!=-1&&brt!=-1)
        {
            if (NodeB[blf].Ch>NodeB[brt].Ch)
            {
                B.push(blf);
                B.push(brt);
            }
            else
            {
                B.push(brt);
                B.push(blf);
            }
        }
        else if (blf!=-1)
        {
            B.push(blf);
        }
        else if (brt!=-1)
        {
            B.push(brt);
        }

    }
    return true;

}
int main()
{
    NODE NodeA[N];
    NODE NodeB[N];
    int n,i,headA=-1,headB=-1;
    readData(NodeA,headA);
    readData(NodeB,headB);

    if (cmp(NodeA,NodeB,headA,headB)==true)
    {
        cout<<"Yes"<<endl;
    }
    else
    {
        cout<<"No"<<endl;
    }
    return 0;
}
