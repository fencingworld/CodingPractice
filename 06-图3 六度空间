#include <iostream>
#include <queue>
#include <map>
#include <string.h>
#include <stdio.h>
#include <vector>
#include <algorithm>
#define N 10001
using namespace std;
vector < vector<int> > sc;

//bool Score[N][N];
multimap<int ,int > score;
map<int ,vector<int> >newsc;
int Vst[N];
int Count;
int n,m;
bool edge(int x,int y) {

    if (x>y)
        swap(x,y);
    //newsc[x].sort();
    vector <int >xx(newsc[x]);
    sort(xx.begin(),xx.end());
    bool res =binary_search(xx.begin(),xx.end(),y);
    if (true == res) {
        return true;
    }
    /* for (it=newsc[x].begin(); it!=newsc[x].end(); it++) {

         if (*it==y)
             return true;
     }*/
    return false;

}
void sd(int level) {
    //level++;
    if (8==level) {
        return ;
    }
    for (int i=1; i<=n; i++) {
        if (Vst[i]==level-1) {
            for (int j=1; j<=n; j++) {
                if (edge(i,j)==true && !Vst[j]) {

                    Vst[j]=level;
                    Count++;
                }
            }
        }

    }
    sd(level+1);
}
int main() {
    int x,y;
    cin>>n>>m;
    //memset(Score,false,sizeof(Score));

    for (int i=0; i<m; i++) {
        cin>>x>>y;
        if (x<y) {
            newsc[x].push_back(y);
        } else {
            newsc[y].push_back(x);
        }

        //   score.insert(pair<int ,int >(x,y));
        //     score.insert(pair<int ,int >(y,x));
        // Score[x][y]=Score[y][x]=true;
    }

    for (int i=1; i<=n; i++) {
        Count=0;
        memset(Vst,0,sizeof(Vst));

        Vst[i]=1;
        Count++;
        sd(2);
        printf("%d: %.2lf%%\n",i,100.0*Count/n);
    }
    //  cout << "Hello world!" << endl;
    return 0;
}
